/**
 * Things Keeper
 * Will save your notes.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: vrahlinskiy@cinimex.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { NoteDto } from '../model/noteDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class NoteControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * create
     * 
     * @param noteDto noteDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUsingPOST1(noteDto: NoteDto, observe?: 'body', reportProgress?: boolean): Observable<NoteDto>;
    public createUsingPOST1(noteDto: NoteDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoteDto>>;
    public createUsingPOST1(noteDto: NoteDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoteDto>>;
    public createUsingPOST1(noteDto: NoteDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (noteDto === null || noteDto === undefined) {
            throw new Error('Required parameter noteDto was null or undefined when calling createUsingPOST1.');
        }

        let headers = this.defaultHeaders;

        // authentication (TOKEN) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<NoteDto>(`${this.configuration.basePath}/api/v1/notes`,
            noteDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteById
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteByIdUsingDELETE1(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteByIdUsingDELETE1(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteByIdUsingDELETE1(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteByIdUsingDELETE1(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteByIdUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // authentication (TOKEN) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/api/v1/notes/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAll
     * 
     * @param description Search &#39;input&#39; in &#39;description&#39; of the note
     * @param from [yyyy-mm-dd] The First date note was created
     * @param input Search in string-like fields of the note(&#39;title&#39; by default)
     * @param tag &#39;value&#39; of tag, which is contained by note
     * @param to [yyyy-mm-dd] The Last date note was created
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllUsingGET1(description?: boolean, from?: string, input?: string, tag?: string, to?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<NoteDto>>;
    public getAllUsingGET1(description?: boolean, from?: string, input?: string, tag?: string, to?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NoteDto>>>;
    public getAllUsingGET1(description?: boolean, from?: string, input?: string, tag?: string, to?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NoteDto>>>;
    public getAllUsingGET1(description?: boolean, from?: string, input?: string, tag?: string, to?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (from !== undefined && from !== null) {
            queryParameters = queryParameters.set('from', <any>from);
        }
        if (input !== undefined && input !== null) {
            queryParameters = queryParameters.set('input', <any>input);
        }
        if (tag !== undefined && tag !== null) {
            queryParameters = queryParameters.set('tag', <any>tag);
        }
        if (to !== undefined && to !== null) {
            queryParameters = queryParameters.set('to', <any>to);
        }

        let headers = this.defaultHeaders;

        // authentication (TOKEN) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<NoteDto>>(`${this.configuration.basePath}/api/v1/notes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsingGET1(id: string, observe?: 'body', reportProgress?: boolean): Observable<NoteDto>;
    public getUsingGET1(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoteDto>>;
    public getUsingGET1(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoteDto>>;
    public getUsingGET1(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // authentication (TOKEN) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<NoteDto>(`${this.configuration.basePath}/api/v1/notes/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update
     * 
     * @param noteDto noteDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUsingPUT1(noteDto: NoteDto, observe?: 'body', reportProgress?: boolean): Observable<NoteDto>;
    public updateUsingPUT1(noteDto: NoteDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoteDto>>;
    public updateUsingPUT1(noteDto: NoteDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoteDto>>;
    public updateUsingPUT1(noteDto: NoteDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (noteDto === null || noteDto === undefined) {
            throw new Error('Required parameter noteDto was null or undefined when calling updateUsingPUT1.');
        }

        let headers = this.defaultHeaders;

        // authentication (TOKEN) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<NoteDto>(`${this.configuration.basePath}/api/v1/notes`,
            noteDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
